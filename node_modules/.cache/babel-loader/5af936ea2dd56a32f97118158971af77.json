{"ast":null,"code":"var _jsxFileName = \"/Users/pablogalante/Documentos/Programacion/Projects/CodeAcademy Full Stack Engineer/Flashcards (Redux)/src/components/NewQuizForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { v4 as uuidv4 } from \"uuid\";\nimport ROUTES from \"../app/routes\";\nimport { addCard } from \"../features/cards/cardsSlice\";\nimport { createNewQuiz } from \"../features/quizzes/quizzesSlice\";\nimport { selectTopics } from \"../features/topics/topicsSlice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function NewQuizForm() {\n  _s();\n\n  const [name, setName] = useState(\"\");\n  const [cards, setCards] = useState([]);\n  const [topicId, setTopicId] = useState(\"\");\n  const history = useHistory();\n  const topics = useSelector(selectTopics);\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (name.length === 0) {\n      return;\n    }\n\n    console.log(addCard);\n    const cardIds = [];\n    const newId = uuidv4(); // create the new cards here and add each card's id to cardIds\n\n    cards.forEach(card => {\n      let cardId = newId;\n      cardIds.push(cardId);\n      dispatch(addCard({\n        id: cardId,\n        front: card.front,\n        back: card.back\n      }));\n    }); // create the new quiz here\n\n    dispatch(createNewQuiz({\n      id: newId,\n      name: name,\n      topicId: topicId,\n      cardIds: cardIds\n    }));\n    history.push(ROUTES.quizzesRoute());\n  };\n\n  const addCardInputs = e => {\n    e.preventDefault();\n    setCards(cards.concat({\n      front: \"\",\n      back: \"\"\n    }));\n  };\n\n  const removeCard = (e, index) => {\n    e.preventDefault();\n    setCards(cards.filter((card, i) => index !== i));\n  };\n\n  const updateCardState = (index, side, value) => {\n    const newCards = cards.slice();\n    newCards[index][side] = value;\n    setCards(newCards);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Create a new quiz\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"quiz-name\",\n        value: name,\n        onChange: e => setName(e.currentTarget.value),\n        placeholder: \"Quiz Title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"quiz-topic\",\n        onChange: e => setTopicId(e.currentTarget.value),\n        placeholder: \"Topic\",\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Topic\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), Object.values(topics).map(topic => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: topic.id,\n          children: topic.name\n        }, topic.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), cards.map((card, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-front-back\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          id: `card-front-${index}`,\n          value: cards[index].front,\n          onChange: e => updateCardState(index, \"front\", e.currentTarget.value),\n          placeholder: \"Front\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: `card-back-${index}`,\n          value: cards[index].back,\n          onChange: e => updateCardState(index, \"back\", e.currentTarget.value),\n          placeholder: \"Back\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: e => removeCard(e, index),\n          className: \"remove-card-button\",\n          children: \"Remove Card\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"actions-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addCardInputs,\n          children: \"Add a Card\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Create Quiz\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n\n_s(NewQuizForm, \"lBrukCxoxSNm0d73ejtKMsRVxes=\", false, function () {\n  return [useHistory, useSelector, useDispatch];\n});\n\n_c = NewQuizForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewQuizForm\");","map":{"version":3,"sources":["/Users/pablogalante/Documentos/Programacion/Projects/CodeAcademy Full Stack Engineer/Flashcards (Redux)/src/components/NewQuizForm.js"],"names":["React","useState","useHistory","useSelector","useDispatch","v4","uuidv4","ROUTES","addCard","createNewQuiz","selectTopics","NewQuizForm","name","setName","cards","setCards","topicId","setTopicId","history","topics","dispatch","handleSubmit","e","preventDefault","length","console","log","cardIds","newId","forEach","card","cardId","push","id","front","back","quizzesRoute","addCardInputs","concat","removeCard","index","filter","i","updateCardState","side","value","newCards","slice","currentTarget","Object","values","map","topic"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { v4 as uuidv4 } from \"uuid\";\nimport ROUTES from \"../app/routes\";\nimport { addCard } from \"../features/cards/cardsSlice\";\nimport { createNewQuiz } from \"../features/quizzes/quizzesSlice\";\nimport { selectTopics } from \"../features/topics/topicsSlice\";\n\nexport default function NewQuizForm() {\n  const [name, setName] = useState(\"\");\n  const [cards, setCards] = useState([]);\n  const [topicId, setTopicId] = useState(\"\");\n  const history = useHistory();\n  const topics = useSelector(selectTopics);\n  const dispatch = useDispatch();\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (name.length === 0) {\n      return;\n    }\n\n    console.log(addCard);\n\n    const cardIds = [];\n    const newId = uuidv4();\n\n    // create the new cards here and add each card's id to cardIds\n    cards.forEach(card => {\n      let cardId = newId;\n      cardIds.push(cardId);\n      dispatch(addCard({\n        id: cardId,\n        front: card.front,\n        back: card.back\n      }));\n    });\n\n    // create the new quiz here\n    dispatch(createNewQuiz({\n      id: newId,\n      name: name,\n      topicId: topicId,\n      cardIds: cardIds\n    }));\n\n    history.push(ROUTES.quizzesRoute());\n  };\n\n  const addCardInputs = (e) => {\n    e.preventDefault();\n    setCards(cards.concat({ front: \"\", back: \"\" }));\n  };\n\n  const removeCard = (e, index) => {\n    e.preventDefault();\n    setCards(cards.filter((card, i) => index !== i));\n  };\n\n  const updateCardState = (index, side, value) => {\n    const newCards = cards.slice();\n    newCards[index][side] = value;\n    setCards(newCards);\n  };\n\n  return (\n    <section>\n      <h1>Create a new quiz</h1>\n      <form onSubmit={handleSubmit}>\n        <input\n          id=\"quiz-name\"\n          value={name}\n          onChange={(e) => setName(e.currentTarget.value)}\n          placeholder=\"Quiz Title\"\n        />\n        <select\n          id=\"quiz-topic\"\n          onChange={(e) => setTopicId(e.currentTarget.value)}\n          placeholder=\"Topic\"\n        >\n          <option value=\"\">Topic</option>\n          {Object.values(topics).map((topic) => (\n            <option key={topic.id} value={topic.id}>\n              {topic.name}\n            </option>\n          ))}\n        </select>\n        {cards.map((card, index) => (\n          <div key={index} className=\"card-front-back\">\n            <input\n              id={`card-front-${index}`}\n              value={cards[index].front}\n              onChange={(e) =>\n                updateCardState(index, \"front\", e.currentTarget.value)\n              }\n              placeholder=\"Front\"\n            />\n\n            <input\n              id={`card-back-${index}`}\n              value={cards[index].back}\n              onChange={(e) =>\n                updateCardState(index, \"back\", e.currentTarget.value)\n              }\n              placeholder=\"Back\"\n            />\n\n            <button\n              onClick={(e) => removeCard(e, index)}\n              className=\"remove-card-button\"\n            >\n              Remove Card\n            </button>\n          </div>\n        ))}\n        <div className=\"actions-container\">\n          <button onClick={addCardInputs}>Add a Card</button>\n          <button>Create Quiz</button>\n        </div>\n      </form>\n    </section>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}